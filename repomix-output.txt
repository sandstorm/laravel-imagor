This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.github/
  ISSUE_TEMPLATE/
    bug.yml
    config.yml
  workflows/
    dependabot-auto-merge.yml
    fix-php-code-style-issues.yml
    phpstan.yml
    run-tests.yml
    update-changelog.yml
  dependabot.yml
  FUNDING.yml
config/
  imgproxy.php
src/
  Enums/
    OutputExtension.php
    ResizeType.php
    SourceUrlMode.php
  Facades/
    ImgProxy.php
  helpers.php
  ImgProxy.php
  ImgProxyServiceProvider.php
tests/
  ArchTest.php
  ImgProxyTest.php
  Pest.php
  TestCase.php
workbench/
  app/
    Providers/
      WorkbenchServiceProvider.php
  config/
    imgproxy.php
.cursorrules
.editorconfig
.gitattributes
.gitignore
CHANGELOG.md
composer.json
LICENSE.md
phpstan.neon.dist
phpunit.xml.dist
README.md

================================================================
Files
================================================================

================
File: .github/ISSUE_TEMPLATE/bug.yml
================
name: Bug Report
description: Report an Issue or Bug with the Package
title: "[Bug]: "
labels: ["bug"]
body:
    - type: markdown
      attributes:
          value: |
              We're sorry to hear you have a problem. Can you help us solve it by providing the following details.
    - type: textarea
      id: what-happened
      attributes:
          label: What happened?
          description: What did you expect to happen?
          placeholder: I cannot currently do X thing because when I do, it breaks X thing.
      validations:
          required: true
    - type: textarea
      id: how-to-reproduce
      attributes:
          label: How to reproduce the bug
          description: How did this occur, please add any config values used and provide a set of reliable steps if possible.
          placeholder: When I do X I see Y.
      validations:
          required: true
    - type: input
      id: package-version
      attributes:
          label: Package Version
          description: What version of our Package are you running? Please be as specific as possible
          placeholder: 2.0.0
      validations:
          required: true
    - type: input
      id: php-version
      attributes:
          label: PHP Version
          description: What version of PHP are you running? Please be as specific as possible
          placeholder: 8.2.0
      validations:
          required: true
    - type: input
      id: laravel-version
      attributes:
        label: Laravel Version
        description: What version of Laravel are you running? Please be as specific as possible
        placeholder: 9.0.0
      validations:
        required: true
    - type: dropdown
      id: operating-systems
      attributes:
        label: Which operating systems does with happen with?
        description: You may select more than one.
        multiple: true
        options:
        - macOS
        - Windows
        - Linux
    - type: textarea
      id: notes
      attributes:
          label: Notes
          description: Use this field to provide any other notes that you feel might be relevant to the issue.
      validations:
          required: false

================
File: .github/ISSUE_TEMPLATE/config.yml
================
blank_issues_enabled: false
contact_links:
  - name: Ask a question
    url: https://github.com/imsus/laravel-imgproxy/discussions/new?category=q-a
    about: Ask the community for help
  - name: Request a feature
    url: https://github.com/imsus/laravel-imgproxy/discussions/new?category=ideas
    about: Share ideas for new features
  - name: Report a security issue
    url: https://github.com/imsus/laravel-imgproxy/security/policy
    about: Learn how to notify us for sensitive bugs

================
File: .github/workflows/dependabot-auto-merge.yml
================
name: dependabot-auto-merge
on: pull_request_target

permissions:
  pull-requests: write
  contents: write

jobs:
  dependabot:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ github.actor == 'dependabot[bot]' }}
    steps:

      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2.3.0
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Auto-merge Dependabot PRs for semver-minor updates
        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-minor'}}
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Auto-merge Dependabot PRs for semver-patch updates
        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-patch'}}
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

================
File: .github/workflows/fix-php-code-style-issues.yml
================
name: Fix PHP code style issues

on:
  push:
    paths:
      - '**.php'

permissions:
  contents: write

jobs:
  php-code-styling:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Fix PHP code style issues
        uses: aglipanci/laravel-pint-action@2.5

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Fix styling

================
File: .github/workflows/phpstan.yml
================
name: PHPStan

on:
  push:
    paths:
      - '**.php'
      - 'phpstan.neon.dist'
      - '.github/workflows/phpstan.yml'

jobs:
  phpstan:
    name: phpstan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: none

      - name: Install composer dependencies
        uses: ramsey/composer-install@v3

      - name: Run PHPStan
        run: ./vendor/bin/phpstan --error-format=github

================
File: .github/workflows/run-tests.yml
================
name: run-tests

on:
  push:
    paths:
      - '**.php'
      - '.github/workflows/run-tests.yml'
      - 'phpunit.xml.dist'
      - 'composer.json'
      - 'composer.lock'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 5
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest]
        php: [8.3, 8.2]
        laravel: [11.*, 10.*]
        stability: [prefer-lowest, prefer-stable]
        include:
          - laravel: 11.*
            testbench: 9.*
            carbon: ^2.63
          - laravel: 10.*
            testbench: 8.*
            carbon: ^2.63

    name: P${{ matrix.php }} - L${{ matrix.laravel }} - ${{ matrix.stability }} - ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo
          coverage: none

      - name: Setup problem matchers
        run: |
          echo "::add-matcher::${{ runner.tool_cache }}/php.json"
          echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: Install dependencies
        run: |
          composer require "laravel/framework:${{ matrix.laravel }}" "orchestra/testbench:${{ matrix.testbench }}" "nesbot/carbon:${{ matrix.os == 'windows-latest' && '^^^' || '' }}${{ matrix.carbon }}" --no-interaction --no-update
          composer update --${{ matrix.stability }} --prefer-dist --no-interaction

      - name: List Installed Dependencies
        run: composer show -D

      - name: Execute tests
        run: vendor/bin/pest --ci

================
File: .github/workflows/update-changelog.yml
================
name: "Update Changelog"

on:
  release:
    types: [released]

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Update Changelog
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          latest-version: ${{ github.event.release.name }}
          release-notes: ${{ github.event.release.body }}

      - name: Commit updated CHANGELOG
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          commit_message: Update CHANGELOG
          file_pattern: CHANGELOG.md

================
File: .github/dependabot.yml
================
# Please see the documentation for all configuration options:
# https://help.github.com/github/administering-a-repository/configuration-options-for-dependency-updates

version: 2
updates:

  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"
    labels:
      - "dependencies"

  - package-ecosystem: "composer"
    directory: "/"
    schedule:
      interval: "weekly"
    labels:
      - "dependencies"

================
File: .github/FUNDING.yml
================
github: Imam Susanto

================
File: config/imgproxy.php
================
<?php

return [
    'endpoint' => env('IMGPROXY_ENDPOINT', 'http://localhost:8080'),
    'key' => env('IMGPROXY_KEY'),
    'salt' => env('IMGPROXY_SALT'),
    'default_source_url_mode' => env('IMGPROXY_DEFAULT_SOURCE_URL_MODE', 'encoded'),
    'default_output_extension' => env('IMGPROXY_DEFAULT_OUTPUT_EXTENSION', 'jpeg'),
];

================
File: src/Enums/OutputExtension.php
================
<?php

namespace Imsus\ImgProxy\Enums;

enum OutputExtension: string
{
    case PNG = 'png';
    case JPEG = 'jpg';
    case WEBP = 'webp';
    case AVIF = 'avif';
    case GIF = 'gif';
    case ICO = 'ico';
    case SVG = 'svg';
    case HEIC = 'heic';
    case BMP = 'bmp';
    case TIFF = 'tiff';

    public static function getDefault(): self
    {
        return self::JPEG;
    }

    public static function fromExtension(string $extension): ?self
    {
        return self::tryFrom(strtolower($extension));
    }
}

================
File: src/Enums/ResizeType.php
================
<?php

namespace Imsus\ImgProxy\Enums;

enum ResizeType: string
{
    case FIT = 'fit';
    case FILL = 'fill';
    case FILL_DOWN = 'fill-down';
    case FORCE = 'force';
    case AUTO = 'auto';

    public function getShortCode(): string
    {
        return match ($this) {
            self::FIT => 'rt:fit',
            self::FILL => 'rt:fill',
            self::FILL_DOWN => 'rt:fill-down',
            self::FORCE => 'rt:force',
            self::AUTO => 'rt:auto',
        };
    }

    public function getFullCode(): string
    {
        return match ($this) {
            self::FIT => 'resizing_type:fit',
            self::FILL => 'resizing_type:fill',
            self::FILL_DOWN => 'resizing_type:fill-down',
            self::FORCE => 'resizing_type:force',
            self::AUTO => 'resizing_type:auto',
        };
    }

    public static function getDefault(): self
    {
        return self::FIT;
    }

    /**
     * Get the description of the resizing type.
     */
    public function getDescription(): string
    {
        return match ($this) {
            self::FIT => 'Resizes the image while keeping aspect ratio to fit a given size.',
            self::FILL => 'Resizes the image while keeping aspect ratio to fill a given size and crops projecting parts.',
            self::FILL_DOWN => 'Same as fill, but if the resized image is smaller than the requested size, imgproxy will crop the result to keep the requested aspect ratio.',
            self::FORCE => 'Resizes the image without keeping the aspect ratio.',
            self::AUTO => 'If both source and resulting dimensions have the same orientation (portrait or landscape), imgproxy will use fill. Otherwise, it will use fit.',
        };
    }
}

================
File: src/Enums/SourceUrlMode.php
================
<?php

namespace Imsus\ImgProxy\Enums;

enum SourceUrlMode: string
{
    case PLAIN = 'plain';
    case ENCODED = 'encoded';

    public static function getDefault(): self
    {
        return self::ENCODED;
    }

    public static function fromString(string $mode): ?self
    {
        return self::tryFrom(strtolower($mode));
    }
}

================
File: src/Facades/ImgProxy.php
================
<?php

namespace Imsus\ImgProxy\Facades;

use Illuminate\Support\Facades\Facade;

/**
 * @see \Imsus\ImgProxy\ImgProxy
 */
class ImgProxy extends Facade
{
    protected static function getFacadeAccessor(): string
    {
        return \Imsus\ImgProxy\ImgProxy::class;
    }
}

================
File: src/helpers.php
================
<?php

use Imsus\ImgProxy\ImgProxy;

if (! function_exists('imgproxy')) {
    function imgproxy(string $url): ImgProxy
    {
        return app(ImgProxy::class)->url($url);
    }
}

================
File: src/ImgProxy.php
================
<?php

namespace Imsus\ImgProxy;

use Imsus\ImgProxy\Enums\OutputExtension;
use Imsus\ImgProxy\Enums\ResizeType;
use Imsus\ImgProxy\Enums\SourceUrlMode;

class ImgProxy
{
    private string $endpoint;

    private string $key;

    private string $salt;

    private string $source_url;

    private SourceUrlMode $source_url_mode;

    private OutputExtension $default_output_extension;

    private ?OutputExtension $overridden_extension = null;

    /** @var array<string, string | int> */
    private array $options = [];

    private ?string $processing_options = null;

    public function __construct()
    {
        $this->endpoint = config('imgproxy.endpoint', 'http://localhost:8080');
        $this->key = $this->validateHexString(config('imgproxy.key', ''), 'key');
        $this->salt = $this->validateHexString(config('imgproxy.salt', ''), 'salt');
        $this->source_url_mode = SourceUrlMode::fromString(config('imgproxy.default_source_url_mode')) ?? SourceUrlMode::getDefault();
        $this->default_output_extension = OutputExtension::fromExtension(config('imgproxy.default_output_extension')) ?? OutputExtension::getDefault();
    }

    /**
     * Set the source URL for the image.
     *
     * @param  string  $source_url  The URL of the source image
     */
    public function url(string $source_url): self
    {
        $this->source_url = $source_url;

        return $this;
    }

    /**
     * Set the height of the output image.
     *
     * @param  int  $height  The desired height in pixels
     */
    public function setHeight(int $height): self
    {
        $this->options['height'] = $height;

        return $this;
    }

    /**
     * Set the width of the output image.
     *
     * @param  int  $width  The desired width in pixels
     */
    public function setWidth(int $width): self
    {
        $this->options['width'] = $width;

        return $this;
    }

    /**
     * Set the resize mode for the image.
     *
     * @param  ResizeType  $mode  The resize mode ('fit', 'fill', 'crop', 'force')
     *
     * @see \Imsus\ImgProxy\Enums\ResizeType
     */
    public function setResizeType(ResizeType $mode): self
    {
        $this->options['resizing_type'] = $mode->value;

        return $this;
    }

    /**
     * Set the device pixel ratio (DPR) for the image.
     *
     * @param  int  $dpr  The device pixel ratio (1-8)
     */
    public function setDpr(int $dpr): self
    {
        if ($dpr < 1 || $dpr > 8) {
            throw new \InvalidArgumentException('DPR (Device Pixel Ratio) must be between 1 and 8');
        }

        $this->options['dpr'] = $dpr;

        return $this;
    }

    /**
     * Set the source URL mode (encoded or plain).
     *
     * @param  SourceUrlMode  $source_url_mode  The source URL mode
     *
     * @see \Imsus\ImgProxy\Enums\SourceUrlMode
     */
    public function setMode(SourceUrlMode $source_url_mode): self
    {
        $this->source_url_mode = $source_url_mode;

        return $this;
    }

    /**
     * Set the output file extension.
     *
     * @param  OutputExtension  $extension  The desired file extension
     *
     * @see \Imsus\ImgProxy\Enums\OutputExtension
     */
    public function setExtension(OutputExtension $extension): self
    {
        $this->overridden_extension = $extension;

        return $this;
    }

    /**
     * Set the processing string.
     *
     * @param  string  $processing_options  The processing string to be used
     *
     * @see https://docs.imgproxy.net/usage/processing#processing-options
     */
    public function setProcessing(string $processing_options): self
    {
        $this->processing_options = $processing_options;

        return $this;
    }

    /**
     * Build the final ImgProxy URL.
     *
     * @return string The generated ImgProxy URL
     *
     * @throws \InvalidArgumentException If the source URL is invalid
     */
    public function build(): string
    {
        try {
            $this->validateSourceUrl();
        } catch (\InvalidArgumentException $e) {
            return $this->source_url;
        }

        $path = $this->buildPath();

        if ($this->key && $this->salt) {
            $signature = $this->generateSignature($path);
        } else {
            $signature = 'insecure';
        }

        return "{$this->endpoint}/{$signature}/{$path}";
    }

    private function validateSourceUrl(): void
    {
        if (empty($this->source_url) || ! filter_var($this->source_url, FILTER_VALIDATE_URL)) {
            throw new \InvalidArgumentException('Invalid source URL');
        }
    }

    private function buildPath(): string
    {
        $processing_options = $this->processing_options ?? $this->buildProcessingOptions();
        $extension = $this->overridden_extension ?? OutputExtension::fromExtension(pathinfo($this->source_url, PATHINFO_EXTENSION)) ?? $this->default_output_extension;

        if ($this->source_url_mode === SourceUrlMode::PLAIN) {
            $path = "{$processing_options}/plain/{$this->source_url}";
            $path .= "@{$extension->value}";
        } else {
            $encoded_source_url = rtrim(strtr(base64_encode($this->source_url), '+/', '-_'), '=');
            $path = "{$processing_options}/{$encoded_source_url}";
            $path .= ".{$extension->value}";
        }

        return $path;
    }

    private function buildProcessingOptions(): string
    {
        return implode('/', array_map(
            fn ($key, $value) => "{$key}:{$value}",
            array_keys($this->options),
            $this->options
        ));
    }

    /**
     * Generates a signature for the given path.
     *
     * @param  string  $path  The path to generate a signature for
     * @return string The generated signature
     */
    public function generateSignature(string $path): string
    {
        $data = "{$this->salt}/{$path}";
        $hmac = hash_hmac('sha256', $data, $this->key, true);
        $signature = base64_encode($hmac);
        $signature = str_replace(['+', '/', '='], ['-', '_', ''], $signature);

        return $signature;
    }

    private function validateHexString(string $value, string $name): string
    {
        if ($value === '') {
            return $value;
        }

        if (! ctype_xdigit($value)) {
            throw new \InvalidArgumentException("The {$name} must be a hex-encoded string.");
        }

        return pack('H*', $value);
    }
}

================
File: src/ImgProxyServiceProvider.php
================
<?php

namespace Imsus\ImgProxy;

use Spatie\LaravelPackageTools\Package;
use Spatie\LaravelPackageTools\PackageServiceProvider;

class ImgProxyServiceProvider extends PackageServiceProvider
{
    public function configurePackage(Package $package): void
    {
        $package
            ->name('laravel-imgproxy')
            ->hasConfigFile();
    }

    public function register()
    {
        parent::register();

        $this->app->singleton(ImgProxy::class, function ($app) {
            return new ImgProxy;
        });

        $this->loadHelpers();
    }

    protected function loadHelpers(): void
    {
        require_once __DIR__.'/helpers.php';
    }
}

================
File: tests/ArchTest.php
================
<?php

// arch('it will not use debugging functions')
//     ->expect(['dd', 'dump', 'ray'])
//     ->each->not->toBeUsed();

================
File: tests/ImgProxyTest.php
================
<?php

namespace Imsus\ImgProxy\Tests;

use Imsus\ImgProxy\Enums\OutputExtension;
use Imsus\ImgProxy\Enums\SourceUrlMode;
use Imsus\ImgProxy\ImgProxy;

beforeEach(function () {
    $this->sample_image_url = 'https://placehold.co/600x400/jpeg';
});

it('can generate signed url', function () {
    $imgProxy = new ImgProxy;
    $url = $imgProxy
        ->url($this->sample_image_url)
        ->setProcessing('rs:fit:300:200:0/g:no')
        ->setExtension(OutputExtension::JPEG)
        ->build();

    expect($url)->toBe('http://localhost:8080/xyeeqF4mNUiHYF5afTDuCmDUuI0VcfCBbkEX3ig3-bo/rs:fit:300:200:0/g:no/aHR0cHM6Ly9wbGFjZWhvbGQuY28vNjAweDQwMC9qcGVn.jpg');
});

it('can generate signed url in plain mode', function () {
    $imgProxy = new ImgProxy;
    $url = $imgProxy
        ->url($this->sample_image_url)
        ->setProcessing('rs:fit:300:200:0/g:no')
        ->setExtension(OutputExtension::JPEG)
        ->setMode(SourceUrlMode::PLAIN)
        ->build();

    expect($url)->toBe("http://localhost:8080/Z9XGOwpdt7sQVI6k-5s1JHX7XS7xVBuWja-T94UktN4/rs:fit:300:200:0/g:no/plain/{$this->sample_image_url}@jpg");
});

it('can generate insecure url', function () {
    config()->set('imgproxy.key', '');
    config()->set('imgproxy.salt', '');

    $imgProxy = new ImgProxy;
    $url = $imgProxy
        ->url($this->sample_image_url)
        ->setProcessing('rs:fit:300:200:0/g:no')
        ->setExtension(OutputExtension::JPEG)
        ->setMode(SourceUrlMode::PLAIN)
        ->build();

    expect($url)->toBe('http://localhost:8080/insecure/rs:fit:300:200:0/g:no/plain/https://placehold.co/600x400/jpeg@jpg');
});

it('can use helper function', function () {
    $url = imgproxy($this->sample_image_url)
        ->setProcessing('rs:fit:300:200:0/g:no')
        ->build();

    expect($url)->toBe('http://localhost:8080/xyeeqF4mNUiHYF5afTDuCmDUuI0VcfCBbkEX3ig3-bo/rs:fit:300:200:0/g:no/aHR0cHM6Ly9wbGFjZWhvbGQuY28vNjAweDQwMC9qcGVn.jpg');
});

it('can use fluent methods', function () {
    $url = imgproxy($this->sample_image_url)
        ->setWidth(100)
        ->setHeight(100)
        ->build();

    expect($url)->toBe('http://localhost:8080/Bi1ABm01lyP2ReV49nRXSqwIP8dRzH_MYW_sb2GttMU/width:100/height:100/aHR0cHM6Ly9wbGFjZWhvbGQuY28vNjAweDQwMC9qcGVn.jpg');
});

================
File: tests/Pest.php
================
<?php

use Imsus\ImgProxy\Tests\TestCase;

uses(TestCase::class)->in(__DIR__);

================
File: tests/TestCase.php
================
<?php

namespace Imsus\ImgProxy\Tests;

use Illuminate\Database\Eloquent\Factories\Factory;
use Imsus\ImgProxy\ImgProxyServiceProvider;
use Orchestra\Testbench\TestCase as Orchestra;

class TestCase extends Orchestra
{
    protected function setUp(): void
    {
        parent::setUp();

        Factory::guessFactoryNamesUsing(
            fn (string $modelName) => 'Imsus\\ImgProxy\\Database\\Factories\\'.class_basename($modelName).'Factory'
        );
    }

    protected function getPackageProviders($app)
    {
        return [
            ImgProxyServiceProvider::class,
        ];
    }

    public function getEnvironmentSetUp($app)
    {
        config()->set('imgproxy.endpoint', 'http://localhost:8080');
        config()->set('imgproxy.key', '9f8872c847aa7692d1ced3cdc65b717029342f01921d7c3cd16a7a7c08bcd2ed');
        config()->set('imgproxy.salt', '1808025a453998c05892b99e08518c5529e8cbd9dc7c2e6d23ca33dfc7db0b30');
    }
}

================
File: workbench/app/Providers/WorkbenchServiceProvider.php
================
<?php

namespace Workbench\App\Providers;

use Illuminate\Support\ServiceProvider;

class WorkbenchServiceProvider extends ServiceProvider
{
    /**
     * Register services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap services.
     */
    public function boot(): void {}
}

================
File: workbench/config/imgproxy.php
================
<?php

return [
    'endpoint' => env('IMGPROXY_ENDPOINT', 'http://localhost:8080'),
    'key' => env('IMGPROXY_KEY', ''),
    'salt' => env('IMGPROXY_SALT', ''),
    'default_source_url_mode' => env('IMGPROXY_DEFAULT_SOURCE_URL_MODE', 'encoded'),
    'default_output_extension' => env('IMGPROXY_DEFAULT_OUTPUT_EXTENSION', 'jpeg'),
];

================
File: .cursorrules
================
You are a highly skilled Laravel package developer tasked with creating a new package. Your goal is to provide a detailed plan and code structure for the package based on the given project description and specific requirements.

1. Development Guidelines:
   - Use PHP 8.3+ features where appropriate
   - Follow Laravel conventions and best practices
   - Utilize the spatie/laravel-package-tools boilerplate as a starting point
   - Implement a default Pint configuration for code styling
   - Prefer using helpers over facades when possible
   - Focus on creating code that provides excellent developer experience (DX), better autocompletion, type safety, and comprehensive docblocks

2. Coding Standards and Conventions:
   - File names: Use kebab-case (e.g., my-class-file.php)
   - Class and Enum names: Use PascalCase (e.g., MyClass)
   - Method names: Use camelCase (e.g., myMethod)
   - Variable and Properties names: Use snake_case (e.g., my_variable)
   - Constants and Enum Cases names: Use SCREAMING_SNAKE_CASE (e.g., MY_CONSTANT)

3. Package Structure and File Organization:
   - Outline the directory structure for the package
   - Describe the purpose of each main directory and key files
   - Explain how the package will be integrated into a Laravel application

4. Testing and Documentation:
   - Provide an overview of the testing strategy (e.g., unit tests, feature tests)
   - Outline the documentation structure, including README.md, usage examples, and API references

Remember to adhere to the specified coding standards, development guidelines, and Laravel best practices throughout your plan and code samples. Ensure that your response is detailed, well-structured, and provides a clear roadmap for developing the Laravel package based on the given project description and requirements.

================
File: .editorconfig
================
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
trim_trailing_whitespace = false

[*.{yml,yaml}]
indent_size = 2

================
File: .gitattributes
================
# Path-based git attributes
# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html

# Ignore all test and documentation with "export-ignore".
/.github            export-ignore
/.gitattributes     export-ignore
/.gitignore         export-ignore
/phpunit.xml.dist   export-ignore
/art                export-ignore
/docs               export-ignore
/tests              export-ignore
/workbench          export-ignore
/.editorconfig      export-ignore
/.php_cs.dist.php   export-ignore
/psalm.xml          export-ignore
/psalm.xml.dist     export-ignore
/testbench.yaml     export-ignore
/UPGRADING.md       export-ignore
/phpstan.neon.dist  export-ignore
/phpstan-baseline.neon  export-ignore

================
File: .gitignore
================
.idea
.phpunit.cache
build
composer.lock
coverage
docs
phpunit.xml
phpstan.neon
testbench.yaml
vendor
node_modules
.env
todo.md

================
File: CHANGELOG.md
================
# Changelog

All notable changes to `laravel-imgproxy` will be documented in this file.

## v0.2.1 - 2024-09-25

**Error Handling Enhancement**

- We've improved the error handling mechanism by adding a try-catch block.
- Now, if an InvalidArgumentException occurs during validateSourceUrl(), the system will fallback to the original source URL.

**Full Changelog**: https://github.com/imsus/laravel-imgproxy/compare/v0.2.0...v0.2.1

## v0.2.0 - 2024-09-25

**Device Pixel Ratio Adjustment**

- Introduced `setDpr` method to customize device pixel ratio
- Enables developers to optimize image quality for various screen resolutions

**Full Changelog**: https://github.com/imsus/laravel-imgproxy/compare/v0.1.1...v0.2.0

================
File: composer.json
================
{
    "name": "imsus/laravel-imgproxy",
    "description": "Laravel integration for ImgProxy",
    "keywords": [
        "Imam Susanto",
        "laravel",
        "laravel-imgproxy"
    ],
    "homepage": "https://github.com/imsus/laravel-imgproxy",
    "license": "MIT",
    "authors": [
        {
            "name": "Imam Susanto",
            "email": "abc.imams@gmail.com",
            "role": "Developer"
        }
    ],
    "require": {
        "php": "^8.2",
        "illuminate/contracts": "^10.0|^11.0|^12.0",
        "spatie/laravel-package-tools": "^1.19"
    },
    "require-dev": {
        "laravel/pint": "^v1.21",
        "nunomaduro/collision": "^8.1.1||^7.10.0",
        "larastan/larastan": "^2.9",
        "orchestra/testbench": "^9.0.0||^8.22.0",
        "pestphp/pest": "^2.34",
        "pestphp/pest-plugin-arch": "^2.8",
        "pestphp/pest-plugin-laravel": "^2.3",
        "phpstan/extension-installer": "^1.3",
        "phpstan/phpstan-deprecation-rules": "^1.1",
        "phpstan/phpstan-phpunit": "^1.3"
    },
    "autoload": {
        "psr-4": {
            "Imsus\\ImgProxy\\": "src/",
            "Imsus\\ImgProxy\\Database\\Factories\\": "database/factories/"
        },
        "files": [
            "src/helpers.php"
        ]
    },
    "autoload-dev": {
        "psr-4": {
            "Imsus\\ImgProxy\\Tests\\": "tests/",
            "Workbench\\App\\": "workbench/app/"
        }
    },
    "scripts": {
        "post-autoload-dump": "@composer run prepare",
        "clear": "@php vendor/bin/testbench package:purge-laravel-imgproxy --ansi",
        "prepare": "@php vendor/bin/testbench package:discover --ansi",
        "build": [
            "@composer run prepare",
            "@php vendor/bin/testbench workbench:build --ansi"
        ],
        "start": [
            "Composer\\Config::disableProcessTimeout",
            "@composer run build",
            "@php vendor/bin/testbench serve"
        ],
        "analyse": "vendor/bin/phpstan analyse",
        "test": "vendor/bin/pest",
        "test-coverage": "vendor/bin/pest --coverage",
        "format": "vendor/bin/pint"
    },
    "config": {
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "phpstan/extension-installer": true
        }
    },
    "extra": {
        "laravel": {
            "providers": [
                "Imsus\\ImgProxy\\ImgProxyServiceProvider"
            ],
            "aliases": {
                "ImgProxy": "Imsus\\ImgProxy\\Facades\\ImgProxy"
            }
        }
    },
    "minimum-stability": "dev",
    "prefer-stable": true
}

================
File: LICENSE.md
================
The MIT License (MIT)

Copyright (c) Imam Susanto <abc.imams@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================
File: phpstan.neon.dist
================
includes:
    - phpstan-baseline.neon

parameters:
    level: 5
    paths:
        - src
        - config
    tmpDir: build/phpstan
    checkOctaneCompatibility: true
    checkModelProperties: true

================
File: phpunit.xml.dist
================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://schema.phpunit.de/10.3/phpunit.xsd"
    backupGlobals="false"
    bootstrap="vendor/autoload.php"
    colors="true"
    processIsolation="false"
    stopOnFailure="false"
    executionOrder="random"
    failOnWarning="true"
    failOnRisky="true"
    failOnEmptyTestSuite="true"
    beStrictAboutOutputDuringTests="true"
    cacheDirectory=".phpunit.cache"
    backupStaticProperties="false"
>
    <testsuites>
        <testsuite name="Imsus Test Suite">
            <directory>tests</directory>
        </testsuite>
    </testsuites>
    <logging>
        <junit outputFile="build/report.junit.xml"/>
    </logging>
    <source>
        <include>
            <directory suffix=".php">./src</directory>
        </include>
    </source>
</phpunit>

================
File: README.md
================
# Laravel integration for ImgProxy

[![Latest Version on Packagist](https://img.shields.io/packagist/v/imsus/laravel-imgproxy.svg?style=flat-square)](https://packagist.org/packages/imsus/laravel-imgproxy)
[![GitHub Tests Action Status](https://img.shields.io/github/actions/workflow/status/imsus/laravel-imgproxy/run-tests.yml?branch=main&label=tests&style=flat-square)](https://github.com/imsus/laravel-imgproxy/actions?query=workflow%3Arun-tests+branch%3Amain)
[![GitHub Code Style Action Status](https://img.shields.io/github/actions/workflow/status/imsus/laravel-imgproxy/fix-php-code-style-issues.yml?branch=main&label=code%20style&style=flat-square)](https://github.com/imsus/laravel-imgproxy/actions?query=workflow%3A"Fix+PHP+code+style+issues"+branch%3Amain)
[![Total Downloads](https://img.shields.io/packagist/dt/imsus/laravel-imgproxy.svg?style=flat-square)](https://packagist.org/packages/imsus/laravel-imgproxy)

This package provides a Laravel integration for ImgProxy, allowing you to easily generate and manipulate image URLs. It supports insecure, signed, and encrypted URL generation, and includes a helper function for quick usage.

## Installation

You can install the package via composer:

```bash
composer require imsus/laravel-imgproxy
```

You can publish the config file with:

```bash
php artisan vendor:publish --tag="laravel-imgproxy-config"
```

This is the contents of the published config file:

```php
return [
    'endpoint' => env('IMGPROXY_ENDPOINT', 'http://localhost:8080'),
    'key' => env('IMGPROXY_KEY'),
    'salt' => env('IMGPROXY_SALT'),
];
```

## Configuration

You can configure the package by updating the values in your `.env` file:

```dotenv
IMGPROXY_ENDPOINT=http://localhost:8080
IMGPROXY_KEY=your_key_here
IMGPROXY_SALT=your_salt_here
```

> [!NOTE]
> The `key' and `salt` are required only if you want to generate signed URLs. If you don't want to generate signed URLs, you can leave them empty.

> [!CAUTION]
> The `key` and `salt` should be in hex-encoded format.

## Usage

### URL Generation

```php
use Imsus\ImgProxy\Facades\ImgProxy;

// Generate URL using Facade
$url = ImgProxy::url('https://placehold.co/600x400/jpeg')
    ->setWidth(300)
    ->setHeight(200)
    ->build();

// Generate URL using helper function
$url = imgproxy('https://placehold.co/600x400/jpeg')
    ->setWidth(300)
    ->setHeight(200)
    ->build();
```

## Testing

```bash
composer test
```

## Changelog

Please see [CHANGELOG](CHANGELOG.md) for more information on what has changed recently.

## Contributing

Please see [CONTRIBUTING](CONTRIBUTING.md) for details.

## Security Vulnerabilities

Please review [our security policy](../../security/policy) on how to report security vulnerabilities.

## Credits

- [Imam Susanto](https://github.com/imsus)
- [All Contributors](../../contributors)

## License

The MIT License (MIT). Please see [License File](LICENSE.md) for more information.



================================================================
End of Codebase
================================================================
